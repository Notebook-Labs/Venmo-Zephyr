// SPDX-License-Identifier: BUSL-1.1

pragma circom 2.0.3;

include "../../../node_modules/circomlib/circuits/comparators.circom";
include "../../../node_modules/circomlib/circuits/gates.circom";

/**
 * This template verifies a fixed section of html containing IDs
 * More information can be found in the documentation
 */
template fix0Regex() {
    signal input in[1553];

    var fixed[1553] = [13,10,67,111,110,116,101,110,116,45,84,121,112,101,58,32,116,101,120,116,47,104,116,109,108,59,32,99,104,97,114,115,101,116,61,85,84,70,45,56,13,10,67,111,110,116,101,110,116,45,84,114,97,110,115,102,101,114,45,69,110,99,111,100,105,110,103,58,32,113,117,111,116,101,100,45,112,114,105,110,116,97,98,108,101,13,10,13,10,13,10,13,10,60,33,68,79,67,84,89,80,69,32,72,84,77,76,32,80,85,66,76,73,67,32,34,45,47,47,87,51,67,47,47,68,84,68,32,72,84,77,76,32,52,46,48,49,47,47,69,78,34,13,10,32,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,84,82,47,104,116,109,108,52,47,115,116,114,105,99,116,46,100,116,100,34,62,13,10,60,104,116,109,108,32,99,108,97,115,115,61,51,68,34,34,32,32,105,100,61,51,68,34,104,116,109,108,95,99,111,110,116,97,105,110,101,114,34,32,120,109,108,110,115,61,51,68,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,49,57,57,57,47,120,104,116,61,13,10,109,108,34,32,100,105,114,61,51,68,34,108,116,114,34,32,108,97,110,103,61,51,68,34,101,110,45,85,83,34,32,120,109,108,110,115,58,102,98,61,51,68,34,104,116,116,112,58,47,47,119,119,119,46,102,97,99,101,98,111,111,107,46,99,111,109,47,50,48,48,56,47,102,98,109,61,13,10,108,34,62,13,10,32,32,32,32,60,104,101,97,100,62,13,10,32,32,32,32,32,32,32,32,60,109,101,116,97,32,104,116,116,112,45,101,113,117,105,118,61,51,68,34,67,111,110,116,101,110,116,45,84,121,112,101,34,32,99,111,110,116,101,110,116,61,51,68,34,116,101,120,116,47,104,116,109,108,59,32,99,104,97,114,115,101,116,61,51,68,117,61,13,10,116,102,45,56,34,62,13,10,32,32,32,32,32,32,32,32,60,116,105,116,108,101,62,32,45,32,86,101,110,109,111,60,47,116,105,116,108,101,62,13,10,32,32,32,32,60,47,104,101,97,100,62,13,10,13,10,32,32,32,32,60,98,111,100,121,32,115,116,121,108,101,61,51,68,34,109,97,114,103,105,110,58,48,59,99,111,108,111,114,58,32,35,50,70,51,48,51,51,34,62,13,10,32,32,32,32,32,32,32,61,50,48,13,10,32,32,32,32,32,32,32,32,60,100,105,118,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,102,97,109,105,108,121,58,39,104,101,108,118,101,116,105,99,97,32,110,101,117,101,39,59,34,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,60,100,105,118,32,115,116,121,108,101,61,51,68,34,109,97,114,103,105,110,58,32,48,32,97,117,116,111,59,32,109,97,120,45,119,105,100,116,104,58,32,51,50,48,112,120,59,34,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,100,105,118,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,52,112,120,59,98,111,114,100,101,114,58,32,50,112,120,32,115,111,108,105,100,32,35,101,56,101,98,101,97,59,34,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,100,105,118,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,32,49,48,112,120,32,48,59,32,116,101,120,116,45,97,108,105,103,110,58,32,99,101,110,116,101,114,59,32,98,97,99,107,61,13,10,103,114,111,117,110,100,45,99,111,108,111,114,58,32,35,48,48,55,52,68,69,59,34,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,105,109,103,32,115,114,99,61,51,68,34,104,116,116,112,115,58,47,47,115,51,46,97,109,97,122,111,110,97,119,115,46,99,111,109,47,118,101,110,109,111,47,118,101,110,109,111,45,108,111,61,13,10,103,111,45,119,104,105,116,101,46,112,110,103,34,32,97,108,116,61,51,68,34,118,101,110,109,111,34,32,116,105,116,108,101,61,51,68,34,118,101,110,109,111,34,32,115,116,121,108,101,61,51,68,34,99,111,108,111,114,58,32,35,102,102,102,59,119,105,100,116,104,58,49,50,53,112,61,13,10,120,59,104,101,105,103,104,116,58,50,52,112,120,59,34,32,47,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,47,100,105,118,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,50,48,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,100,105,118,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,50,48,112,120,59,98,97,99,107,103,114,111,117,110,100,45,99,111,108,111,114,58,35,102,102,102,59,34,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,50,48,13,10,13,10,60,100,105,118,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,62,13,10,32,32,32,61,50,48,13,10,13,10,13,10,13,10,32,32,32,61,50,48,13,10,13,10,60,116,97,98,108,101,32,105,100,61,51,68,34,95,115,116,111,114,121,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,62,32,60,116,98,111,100,121,62,13,10,32,32,32,32,60,116,114,62,13,10,32,32,32,32,32,32,32,32,60,33,45,45,32,105,109,103,32,111,102,32,97,99,116,111,114,32,45,45,62,13,10,32,32,32,32,32,32,32,32,60,116,100,32,118,97,108,105,103,110,61,51,68,34,116,111,112,34,32,119,105,100,116,104,61,51,68,34,52,56,112,120,34,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,45,114,105,103,104,116,58,49,48,112,120,59,34,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,60,97,32,104,114,101,102,61,51,68,34,104,116,116,112,115,58,47,47,118,101,110,109,111,46,99,111,109,47,99,111,100,101,63,117,115,101,114,95,105,100,61,51,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,13,10,38,97,99,116,111,114,95,105,100,61,51,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,32,97,114,105,97,45,108,97,98,101,108,61,51,68,34,34,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,105,109,103,32,115,114,99,61,51,68,34,104,116,116,112,115,58,47,47];

    // for the bytes of 'fixed' which are non-zero, they must be equal to the bytes of 'in'
    for (var i = 0; i < 1553; i++) {
        (in[i] - fixed[i]) * fixed[i] === 0;
    }

    // check all zero-d out parts are 0-9 because it is venmo ID information
    var zeroIndices[38] = [1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496];
    component lt[2][38];
    component and[38];
    for (var i = 0; i < 38; i++) {
        lt[0][i] = LessThan(8);
        lt[0][i].in[0] <== 47;
        lt[0][i].in[1] <==  in[zeroIndices[i]];

        lt[1][i] = LessThan(8);
        lt[1][i].in[0] <==  in[zeroIndices[i]];
        lt[1][i].in[1] <== 58;

        and[i] = AND();
        and[i].a <== lt[0][i].out;
        and[i].b <== lt[1][i].out;

        and[i].out === 1;
    }
}

