// SPDX-License-Identifier: BUSL-1.1

pragma circom 2.0.3;

include "../../../node_modules/circomlib/circuits/comparators.circom";
include "../../../node_modules/circomlib/circuits/gates.circom";

/** 
 * This template verifies a fixed section of html containing the sender and recipient ID which are extracted
 * More information can be found in the documentation
 * 3268 constraints
 */
template fix1Regex() {
    signal input in[869];

    var fixed[869] = [121,108,101,61,51,68,34,98,111,114,100,101,114,45,114,97,100,105,117,115,58,51,112,120,59,119,105,100,116,104,58,52,56,112,120,59,104,101,105,103,104,116,58,52,56,112,120,59,34,47,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,60,47,97,62,13,10,32,32,32,32,32,32,32,32,60,47,116,100,62,13,10,32,32,32,32,32,32,32,32,60,116,100,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,52,112,120,59,99,111,108,111,114,58,35,50,70,51,48,51,51,59,118,101,114,116,105,99,97,108,45,97,108,105,103,110,58,116,111,112,59,112,97,100,100,105,110,61,13,10,103,45,108,101,102,116,58,50,112,120,59,34,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,60,100,105,118,32,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,33,45,45,32,97,99,116,111,114,32,110,97,109,101,32,45,45,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,97,32,115,116,121,108,101,61,51,68,34,99,111,108,111,114,58,35,48,48,55,52,68,69,59,32,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,110,111,110,101,34,32,104,114,101,102,61,51,68,34,104,116,61,13,10,116,112,115,58,47,47,118,101,110,109,111,46,99,111,109,47,99,111,100,101,63,117,115,101,114,95,105,100,61,51,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,97,99,116,111,114,95,105,100,61,51,68,0,0,0,0,0,0,0,0,0,0,0,0,0,61,13,10,0,0,0,0,0,0,34,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,89,111,117,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,47,97,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,33,45,45,32,97,99,116,105,111,110,32,45,45,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,115,112,97,110,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,97,105,100,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,47,115,112,97,110,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,50,48,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,33,45,45,32,114,101,99,105,112,105,101,110,116,32,110,97,109,101,32,45,45,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,97,32,115,116,121,108,101,61,51,68,34,99,111,108,111,114,58,35,48,48,55,52,68,69,59,32,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,110,111,110,101,34,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,50,48,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,104,114,101,102,61,51,68,34,104,116,116,112,115,58,47,47,118,101,110,109,111,46,99,111,109,47,99,111,100,101,63,117,115,101,114,95,105,100,61,51,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,13,10,0,0,0,0,0,38,97,99,116,111,114,95,105,100,61,51,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,50,48,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32];

    // for the bytes of 'fixed' which are non-zero, they must be equal to the bytes of 'in'
    for (var i = 0; i < 869; i++) {
        (in[i] - fixed[i]) * fixed[i] === 0;
    }

    // check all zero-d out parts are 0-9 because it is venmoID information
    var zeroIndices[76] = [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 397, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820];
    component lt[2][76];
    component and[76];
    for (var i = 0; i < 76; i++) {
        lt[0][i] = LessThan(8);
        lt[0][i].in[0] <== 47;
        lt[0][i].in[1] <==  in[zeroIndices[i]];

        lt[1][i] = LessThan(8);
        lt[1][i].in[0] <==  in[zeroIndices[i]];
        lt[1][i].in[1] <== 58;

        and[i] = AND();
        and[i].a <== lt[0][i].out;
        and[i].b <== lt[1][i].out;

        and[i].out === 1;
    }

    //
    // Extract the IDs
    //

    // extract the venmo ID
    // these are the indices of the offramper ID
    var idIndices[19] = [768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789];
    signal output venmoID[19];
    for (var i = 0; i < 19; i++) {
        venmoID[i] <== in[idIndices[i]];
    }

    // get sender ID 
    var senderIndices[19] = [802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820];
    signal output senderID[19];
    for (var i = 0; i < 19; i++) {
        senderID[i] <== in[senderIndices[i]];
    }

}