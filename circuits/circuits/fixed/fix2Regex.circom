// SPDX-License-Identifier: BUSL-1.1

pragma circom 2.0.3;

include "../../../node_modules/circomlib/circuits/comparators.circom";
include "../../../node_modules/circomlib/circuits/gates.circom";

/**
 * This template verifies a fixed section of html containing the note and extracts the note
 * More information can be found in the documentation
 */
template fix2Regex() {
    signal input in[528];

    var fixed[528] = [13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,47,97,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,50,48,13,10,32,32,32,32,32,32,32,32,32,32,32,32,60,47,100,105,118,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,60,33,45,45,32,110,111,116,101,32,45,45,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,60,100,105,118,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,112,62,0,0,0,0,32,0,0,0,0,32,0,0,0,0,32,0,0,0,0,60,47,112,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,60,47,100,105,118,62,13,10,32,32,32,32,32,32,32,32,60,47,116,100,62,13,10,32,32,32,32,60,47,116,114,62,13,10,32,32,32,32,60,116,114,62,13,10,32,32,32,32,32,32,32,32,60,116,100,62,60,47,116,100,62,13,10,32,32,32,32,32,32,32,32,60,116,100,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,52,112,120,59,112,97,100,100,105,110,103,45,108,101,102,116,58,50,112,120,59,99,111,108,111,114,58,35,50,70,51,48,51,51,59,34,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,84,114,97,110,115,102,101,114,32,68,97,116,101,32,97,110,100,32,65,109,111,117,110,116,58,13,10,32,32,32,32,32,32,32,32,60,47,116,100,62,13,10,32,32,32,32,60,47,116,114,62,13,10,32,32,32,32,60,116,114,62,13,10,32,32,32,32,32,32,32,32,60,116,100,62,60,47,116,100,62,13,10,32,32,32,32,32,32,32,32,60,116,100,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,52,112,120,59,112,97,100,100,105,110,103,45,108,101,102,116,58,50,112,120,59,99,111,108,111,114,58,35,50,70,51,48,51,51,59,34,62,13,10,32,32,32,32,32,32,32,32,60,33,45,45,32,100,97,116,101,44,32,97,117,100,105,101,110,99,101,44,32,97,110,100,32,97,109,111,117,110,116,32,45,45,62,13,10,32,32,32,32,32,32,32,32,32,32,32,32,60,115,112,97,110,62];

    // checked elements of fixed indices match
    for (var i = 0; i < 528; i++) {
        (in[i] - fixed[i]) * fixed[i] === 0;
    }

    //
    // Check and extract the note
    //

    // check the nonce/message values are 0-9. The venmo message should be 4 blocks of 0-9 with a space in-between each block.
    var claimIndices[16] = [129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147];
    component lt[2][16];
    component and[16];
    for (var i = 0; i < 16; i++) {
        lt[0][i] = LessThan(8);
        lt[0][i].in[0] <== 47;
        lt[0][i].in[1] <==  in[claimIndices[i]];

        lt[1][i] = LessThan(8);
        lt[1][i].in[0] <==  in[claimIndices[i]];
        lt[1][i].in[1] <== 58;

        and[i] = AND();
        and[i].a <== lt[0][i].out;
        and[i].b <== lt[1][i].out;

        and[i].out === 1;
    }


    // output nonce as a single signal
    signal nonce[17];
    nonce[0] <== 0;
     for (var i = 1; i < 17; i++) {
        nonce[i] <== 10 * nonce[i - 1] + (in[claimIndices[i - 1]] - 48);
    }

    signal output claimId;
    claimId <== nonce[16];
}
